import { redirect } from "next/navigation";

import { Promo } from "@/components/promo";
import { Quests } from "@/components/quests";
import { FeedWrapper } from "@/components/feed-wrapper";
import { UserProgress } from "@/components/user-progress";
import { StickyWrapper } from "@/components/sticky-wrapper";
import { getCourseById, getChallengesForLesson } from "@/lib/data";
import { getUserProgress } from "@/actions/user-progress";
import { getUserSubscription } from "@/actions/user-subscription";

import { Unit } from "./unit";
import { Header } from "./header";

const LearnPage = async () => {
  const [userProgress, userSubscription] = await Promise.all([
    getUserProgress(),
    getUserSubscription(),
  ]);

  if (!userProgress || !userProgress.activeCourseId) {
    redirect("/courses");
  }

  const course = getCourseById(userProgress.activeCourseId);
  if (!course) {
    redirect("/courses");
  }

  // Calculate lesson percentages for each unit
  const units = course.units.map(unit => ({
    ...unit,
    lessons: unit.lessons.map(lesson => {
      const challenges = getChallengesForLesson(lesson.id);
      const completed = challenges.filter(c => c.completed).length;
      const percentage = challenges.length > 0 ? (completed / challenges.length) * 100 : 0;
      return {
        ...lesson,
        completed: percentage === 100,
        percentage,
      };
    }),
  }));

  // Calculate course progress
  const totalLessons = units.reduce((acc, unit) => acc + unit.lessons.length, 0);
  const completedLessons = units.reduce((acc, unit) => 
    acc + unit.lessons.filter(lesson => lesson.completed).length, 0);
  const courseProgress = totalLessons > 0 ? (completedLessons / totalLessons) * 100 : 0;

  const isPro = !!userSubscription?.isActive;

  return (
    <div className="flex flex-row-reverse gap-[48px] px-6">
      <StickyWrapper>
        <UserProgress
          activeCourse={userProgress.activeCourse}
          hearts={userProgress.hearts}
          points={userProgress.points}
          hasActiveSubscription={isPro}
        />
        {!isPro && (
          <Promo />
        )}
        <Quests points={userProgress.points} />
      </StickyWrapper>
      <FeedWrapper>
        <Header title={userProgress.activeCourse.title} />
        {units.map((unit) => (
          <div key={unit.id} className="mb-10">
            <Unit
              id={unit.id}
              order={unit.order}
              description={unit.description}
              title={unit.title}
              lessons={unit.lessons}
              activeLesson={courseProgress.activeLesson as typeof lessons.$inferSelect & {
                unit: typeof unitsSchema.$inferSelect;
              } | undefined}
              activeLessonPercentage={lessonPercentage}
            />
          </div>
        ))}
      </FeedWrapper>
    </div>
  );
};
 
export default LearnPage;
